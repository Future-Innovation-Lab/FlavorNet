@using FlavorNet.Data;
@using FlavorNet.Grid;
@inject IReviewFilters Filters

@if (CurrentReview is not null)
{
    <div class="row contact-detail">
        <div class="col-1 text-right">
            <a title="Edit" href="edit/@CurrentReview.Id">
                &nbsp;📝&nbsp;
            </a>
            @if (CanDelete)
            {
                <span @onclick="DeleteRequestAsync"
                      title="Delete" class="clickable red">❌</span>
            }
            else
            {
                <span>&nbsp;</span>
            }
            &nbsp;
        </div>
        <div class="col-2">
            <a href="@ViewLink" alt="View Details"
               title="View Details">
                @CurrentReview.Reviewer
            </a>
        </div>
        @if (!DeleteConfirmation)
        {
            <div class="col-2">@CurrentReview.Sentiment</div>
            <div class="col-3">@CurrentReview.Comment</div>
        }
        else
        {
            <div class="col-9">
                <DeletePrompt Confirmation="ConfirmAsync" />
            </div>
        }
    </div>
}
@code {
    private Review _currentReview = new Review();

    /// <summary>
    /// The <see cref="Contact"/> being rendered.
    /// </summary>
    [Parameter]
    public Review CurrentReview
    {
        get => _currentReview;
        set
        {
            if (value is not null && !value.Equals(_currentReview))
            {
                _currentReview = value;
                DeleteConfirmation = false;
            }
        }
    }

    /// <summary>
    /// Event to raise when a contact delete is requested.
    /// </summary>
    [Parameter]
    public EventCallback DeleteContact { get; set; }

    /// <summary>
    /// Overall wrapper of functionality.
    /// </summary>
    [CascadingParameter]
    public GridWrapper? Wrapper { get; set; }

    /// <summary>
    /// Returns <c>true</c> if conditions for delete are met.
    /// </summary>
    private bool CanDelete => !DeleteConfirmation &&
    (Wrapper?.DeleteRequestId == 0 ||
    Wrapper?.DeleteRequestId == CurrentReview?.Id);

    /// <summary>
    /// Navigate to view.
    /// </summary>
    private string ViewLink => $"View/{CurrentReview?.Id}";

    /// <summary>
    /// Confirm the delete.
    /// </summary>
    private bool DeleteConfirmation { get; set; }

    /// <summary>
    /// Called based on confirmation.
    /// </summary>
    /// <param name="confirmed"><c>True</c> when confirmed</param>
    /// <returns>A <see cref="Task"/>.</returns>
    private async Task ConfirmAsync(bool confirmed)
    {
        if (confirmed)
        {
            await DeleteAsync();
        }
        else
        {
            DeleteConfirmation = false;

            if (Wrapper is not null)
            {
                await Wrapper.DeleteRequested.InvokeAsync(0);
            }
        }
    }

    /// <summary>
    /// Set delete to true.
    /// </summary>
    private async Task DeleteRequestAsync()
    {
        if (Wrapper?.DeleteRequestId == 0)
        {
            DeleteConfirmation = true;
            await Wrapper.DeleteRequested.InvokeAsync(CurrentReview.Id);
        }
    }

    /// <summary>
    /// Deletes the <see cref="Contact"/>.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private Task DeleteAsync()
    {
        return DeleteContact.InvokeAsync(this);
    }

    /// <summary>
    /// Correctly formatted name.
    /// </summary>
    /*private string Name => Filters.ShowFirstNameFirst ?
    $"{CurrentContact?.FirstName} {CurrentContact?.LastName}" :
    $"{CurrentContact?.LastName}, {CurrentContact?.FirstName}";*/
}